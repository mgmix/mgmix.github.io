{"/":{"title":"Init","content":"\nWIP\n\n","lastmodified":"2022-12-22T15:29:48.344883085Z","tags":null},"/notes/%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88-1%EC%9E%A5":{"title":"대규모 시스템 설계 기초 1장","content":"\n\n\n한명의 사용자를 지원하는 시스템에서 시작하여, 최종적으로는 몇백만 사용자를 지원하는 시스템을 설계할 것이다\n\n## 단일 서버\n\n웹앱, 데이터베이스 , 캐시 드잉 전부 한 대에서 실행\n\n- 웹 어플리케이션 : 비즈니스 로직, 데이터 저장등을 처리 하기 ㅜ이해서는 서버 구현용 언어를 사용하고 프레젠 테이션용으로 는 클라이언트 구현용 언어 자바스크립트 HTML 등을 사용\n- 모바일 앱 : HTTP 프로토콜, JSON \n\n## 데이터 베이스\n사용자가 늘면 서버 하나로 처리는 충분치 않아, 데이터 서버 를 분리 하면 각가을 독립적으로 확장할 수있음\n\n어떤 데이터 베이스를 사용할 것인가?\n1. 관계형 데이터베이스\n\t1. 자료를 테이블과 열, 칼럼으로 표현\n2. 비관계형 데이터 베이스\n\t1. 키-값 저장소, 그래프 저장소, 칼럼 저장소, 문서 저장소\n\n- low latency 요구\n- 비정형 데이터\n- 직렬화 혹은 역직렬화만 필요\n- 아주 많은 데이터 양 \n\n\n## 수직적 규모 확장 vs 수평적 규모 확장\n\n트래픽이 많아질 경우, 수직적 규모의 경우에 failover, redundancy 등의 방안 제시가 되지 않음.\n\n수평적 규모 확장이 대규모 어플리케이션 지원에 적절\n\n너무 많은 트래픽이 단일 서버에 몰리게 되면 서비스가 다운 되므로 트래픽 분산이 필요함  그로 인해 로드밸런서를 도입하는게 적절\n\n\n## 로드 밸런서\n\n부하 분산 집합에 속한 웹 서버들에게 트래픽 부하를 고르게 분산하는 역할을 한다.\n\nA 가 다운 되면 모든 트래픽은 B 로 전송\n\n웹 서버 계층은 이로 인해 가용성이 증대되었지만, 데이터 계층이 문제다 이제  그럼 데이터베이스를 다중화 해야한다\n\n## 데이터 베이스 다중화\n\n보통은 서버 사이에 Mater - Slave  를 설정하고 데이터 원본은 주 서버에 사본은 부 서버에 저장하는 방식이다.\n일반적으로 Read 연산이 더 많이 일어나므로, 부 서버에서 Read 연산을 처리하고 Write 연산은 주서버에서 처리한다.\n\n데이터 동기화 문제가 발생할 수있는데, 복구 스크립트를 돌리거나 다중 마스터나 원형다중화 등을 구성할 수있다.\n\n웹 계층과 데이터 계층은 어느정도 해결 되었으니, 응답 시간을 개선 해보자\n응답 시간은 Cache 를 붙이고 정적 콘텐츠를 CDN 으로 옮기면 개선 할 수있다.\n\n\n## 캐시\n캐시는 값비싼 연산 결과 또는 자주 참조되는 데이터를 메모리 안에 두고, 뒤이은 요청이 보다 빨리 처리될 수있도록 하는 저장소다.\n어플리케이션의 성능은 데이터베이스를 얼마나 자주 호출하느냐에 크게 좌우되는데, 캐시는 그런 문제를 완화 할 수있다.\n\n### 캐시 계층\nCache tier 데이터가 잠시 보관 되는 곳으로 데이터 베이스보다 훨씬 빠르며, 데이터베이스의 부하를 줄일수있음.\n캐시 계층의 규모를 독립적으로 확장시키는 것도 가능\n\n캐시 전략 종류는 다양함\n- 읽기 주도형 캐시 전략 (Read-through caching strategy)\n\n### 캐시 사용시 유의점\n- 어떤 상황에 바람직한가?\n- 어떤 데이터를 캐시에 두어야하나?\n- 캐시에 보관된 데이터는 어떻게 만료되나?\n- 일관성은 어떻게 유지되는가?\n- 장애에는 어떻게 대처할 것인가?\n\t- 캐시서버를 한대만 두는 경우 단일 장애지점 (SPOF, Single Point Of Failure) 가 될 수있따.\n- 캐시 메모리는 얼마나 크게 잡을 것인가?\n\t- 메모리가 너무 작으면 액세스 패턴에 따라서는 데이터가 너무 자주 캐시에서 밀려나버려(eviction) 캐시의 성능이 떨어지게 된다. 이를 막을 한가지 방법은 캐시 메모리를 과할당(overprovision) 하는 것이다.\n- 데이터 방출 (eviction) 정책은 무엇인가?\n\t- 캐시가 꽉 차버리면 기존 데이터를 내보내야한다. 캐시 데이터 방출 정책이라 하는데, 널리쓰이는 것은 LRU (Least Recently Used), 다른 정책으로는 LFU(Least Frequently Used)나 FIFO 같은 것도 있음\n\n## 컨텐츠 전송 네트워크 (CDN)\n이미지, 비디오, CSS, Javascript 파일 등을 캐시 할 수있다.\n\n### 고려해야 할 사항\n- 비용\n\t- 제 3사업자에 의해 운영되며, CDN으로 들어가고 나가는 데이터 전송 양에 따라 요금을 내게 된다. 자주 사용되지 않는 컨텐츠를 캐싱하는 것은 이득이 되지 않으므로, 빼자 \n- 적절한 만료 시한 설정\n\t- [[content/notes/시의성(time-sensitive)]] 이 중요한 콘텐츠의 경우 만료 시점을 잘 정해야한다.\n- CDN 장애에 대한 대처 방안\n- 콘텐츠 무효화(invalidation) 방법\n\t- 아직 만료되지 않은 콘텐츠라도 아래 방법가운데 하나를 사용하면 CDN 에서 제거 할 수있다.\n\t\t- CDN 사업자가 제공하는 API 를 사용하여 무효화\n\t\t- 다른 버전을 서비스하도록 Object versioning 을 이용. URL 마지막에 버전 번호를 인자로 주면 된다 (image.png?v=2)\n\n\n1. 정적 컨텐츠를 CDN 통해 제공하여 웹 계층의 부하 줄이기\n2. 캐시를 통한 데이터 계층 부하 줄이기\n\n\n## 무상태(Stateless) 웹 계층\n웹 계층을 수평적으로 확장하는 방법을 고민해 보자.\n상태 정보 (사용자 세션 데이터 등)을 웹 계층에서 제거해야한다.\n바람직한 전략으로는, 상태 정보를 데이터 베이스에 보관하고 필요할 때 가져오도록 하는 것.\n이렇게 구성된 웹 계층을 무상태 웹 계층이라고 한다.\n\n### 상태정보 의존적인 아키텍처\n서버 1 , 서버 2, 서버 3 에서 각각 사용자의 상태정보를 갖고 있게 된다면 사용자가 다른 서버로 접속시 인증이 실패하는 현상이 발생한다. 그렇기에 같은 클라이언트로 부터의 요청은 항상 같은 서버로 전송되어야하는 문제가 생긴다. 대부분의 로드 밸런서가 이를 지원하기 위해 고정 세션 (Sticky session) 이라는 기능을 제공하는데, 이는 로드밸런서에 부담을 준다. 게다가 로드 밸런서 뒷단에 서버를 추가하거나 제거하기도 까다롭고. 이들 서버의 장애를 처리하기도 복잡해진다.\n\n### 무상태 아키텍처\n웹서버는 상태정보가 필요한 경우 공유 저장소(Shared Storage) 로부터 데이터를 가져온다.\n상태 정보는 웹 서버로부터 물리적으로 분리 되어있다.\n\n이러한 구조는 안정적이고, 단순하며, 규모 확장이 쉽다.\n\n전 세계 대상으로 쾌적하게 서비스를 제공하기 위해서는, 여러 데이터 센터를 지원하는게 필수다.\n\n## 데이터 센터\n두 개의 데이터 센터를 이용할 때, 장애가 없는 상황에서 사용자는 가장 가까운 데이터 센터로 안내되게 되는데 이 절차를 지리적 라우팅 (geoDNS-routing, geo-routing) 이라고 부른다. 지리적 라우팅에서의 geoDNS 는 사용자의 위치에 따라 도메인의 이름을 어떤 IP 주소로 변환할지 결정 할 수있도록 도와주는 DNS 서비스다.\n\n데이터 센터에서 장애가 발생하면, 모든 트래픽이 다른 하나로 전송되는 상황이 발생한다.\n이러한 다중 데이터 센터 아키텍처를 구축하기 위해서는 몇 가지 기술적인 난제를 해결해야한다.\n- 트래픽 우회\n\t- 올바른 데이터 센터로 트래픽을 보내는 효과적인 방뻐을 찾아야한다\n- 데이터 동기화\n\t- 보편적 전략은 여러 데이터센터에 걸쳐 다중화 하는것\n- 테스트와 배포\n\t- 여러 위치에서 테스트 해보는 것이 중요. 자동화된 배포 도구는 중요한 역할을 함\n\n시스템을 더 큰 규모로 확장하기 위해서는 시스템의 컴포넌트를 분리하여, 각기 독립적으로 확장 될 수 있도록 하여야한다. 메세지 큐는 많은 실제 분산 시스템이 이 문제를 풀기 위해 채용하고 있는 핵심적 전략 가운데 하나\n\n\n## 메시지 큐\n[[메시지 큐]]는 메시지의 무손실(durability, 메시지 큐에 일단 보관된 메시지는 소비자가 꺼낼 때까지 안전히 보관된다는 특성)을 보장하는 비동기 통신을 지원하는 컴포넌트 다.\n메시지의 버퍼역할을 하며, 비동기적으로 전송한다.\n생산자 또는 발행자라고 불리는 입력 서비스가 메시지를 만들어 메시지 큐에 발행 한다.\n\n## 로그, 메트릭 그리고 자동화\n- 로그\n\t- 에러 로그를 모니터링하는 것은 중요. 로그를 단일 서비스로 모아주는 도구를 활용\n- 메트릭\n\t- 메트릭을 잘 수집하면 사업 현황에 관한 유용한 정보를 얻을 수있고, 시스템 현재 상태를 쉽게 파악 가능\n\t\t- 호스트 단위\n\t\t\t- CPU, 메모리, 디스크 I/O  에 관한 메트릭이 여기 해당\n\t\t- 종합 메트릭 \n\t\t\t- 데이터 베이스 계층의 성능, 캐시 계층의 성능 같은 것이 해당\n\t\t- 핵심 비즈니스 메트릭\n\t\t\t- 일별 능동 사용자 (daily active user), 수익 (revenue), 재방문(retention) 같은 것이 해당\n- 자동화\n\t- 지속적 통합, 빌드, 테스트, 배포 등 ..\n\n- 메세지 큐는 각 컴포넌트가 보다 느슨히 결합 될 수있도록 하고 결함에 대한 내성을 높인다.\n- 로그, 모니터링, 메트릭, 자동화 지원하기 위한 장치 추가 \n\n## 데이터 베이스의 규모 확장\n저장할 데이터가 많아지면 부하도 증가\n두가지 접근 법이 있음\n1. 수직적 규모 확장\n\t1. 스케일 업으로, 고성능의 자원을 증설 스택오버플로는 2013년 한 해 방문한 천만 명의 사용자 전부를 한대의 마스터 데이터베이스로 처리했음\n\t\t1. 문제점\n\t\t\t1. 데이터 베이스 서버 하드웨어 한계가 있으므로 무한 증설은 안됨\n\t\t\t2. SPOF\n\t\t\t3. 비용이 많이듬\n2. 수평적 규모 확장\n\t1. [[content/notes/샤딩(Sharding)]] 이라고도 부르는데, 더 많은 서버를 추가함 으로서 성능 향상\n\n\n## 백만 사용자, 그리고 그 이상\n\n다시 한번 정리하기\n\n- 웹 계층은 무상태 계층으로\n- 모든 계층에 다중화 도입\n- 가능한 한 많은 데이터 캐시\n- 여러 데이터 센터를 지원\n- 정적 콘텐츠는 CDN을 통해 서비스\n- 데이터 계층은 샤딩을 통해 그 규모를 확장\n- 각 계층은 독립적 서비스로 분할\n- 시스템을 지속적으로 모니터링 하고, 자동화 도구를 활용\n\n\n\n","lastmodified":"2022-12-22T15:29:48.348883125Z","tags":null},"/notes/%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88-2%EC%9E%A5":{"title":"대규모 시스템 설계 기초 2장","content":"\n시스템 용량이나, 성능 요구사항에 대한 개략적인 규모 추정 방법\n효과적으로 개략적 규모 추정을 해내려면 규모 확장성을 표현하는데 필요한 기본기에 능숙해야한다.\n\n2의 제곱수, 응답지연 (latency) 값, 가용성에 관계된 수치들을 잘 이해하고 있어야한다.\n\n\n문제를 풀어나가는 절차가 중요.\n\n- 근사치 활용 계산 \n- 가정은 적어두기\n- 단위를 붙여라 \n- QPS, 최대 QPS, 저장소 요구량, 캐시 요구량, 서버 수 등을 추정 하는 것\n\n\n\n\n","lastmodified":"2022-12-22T15:29:48.348883125Z","tags":null},"/notes/%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88-3%EC%9E%A5":{"title":"대규모 시스템 설계 기초 3장","content":"\n# 시스템 설계\n\n지원자 설계능력의 기술적 측면만을 평가하는 자리가 아닌, 협력에 적합한 사람인지 압박이 심한 상황도 잘 헤쳐 나갈 수있는 자질이 있는지, 모호한 문제를 건설적으로 해결할 능력이 있는 지 등을 살펴 볼 수 있다.\n\n설계의 순수성에 집착한 나머지 타협적 결정(trade-off) 를 도외시하고 과도한 엔지니어링 (over-enginerring) 을 하고마는 엔지니어들이 현업에도 많다. 그런 엔지니어 들은 과도한 엔지니어링의 결과로 시스템 전반의 비용이 올라간다는 사실을 알아채지 못하는 일이 많다.\n\n다른 부정적 신호로는, 완고함, 편협함 같은 것들도 포함된다.\n\n## 4단계 접근법\n### 1단계 문제 이해 및 설계 범위 확정 (3분 ~ 10분)\n요구사항을 완전히 이해하지 않고 답을 내놓는 행위는 아주 엄청난 부정적 신호다.\n정답은 없으니 바로 답부터 들이밀지 말고, 깊이 생각하고 질문하여 요구사항과 가정을 분명히 해라\n올바른 질문, 적절한 가정, 시스템 구축에 필요한 정보를 모으는 것이 중요하다.\n\n예를 들면 아래와 같은 질문들이 있다.\n- 구체적으로 어떤 기능을 만들어야하나?\n- 제품 사용자 수는 얼마나 되나?\n- 회사의 규모는 얼마나 빨리 커지리라 예상되나? 분기 단위로\n- 회사가 주로 사용하는 기술 스택은 무엇인가? 설계를 단순화 하기 위해 활용할 수있는 기존 서비스로는 어떤 것 들이 있나?\n\n### 2단계 개략적인 설계안 제시 및 동의 구하기 (10분 ~ 15분)\n- 설계안에 대한 최초 청사진을 제시하고 의견 구하기\n\t- 면접관을 팀원 인 것처럼 대하고. 대화하고 설계하기\n- 화이트보드나, 종이에 핵심 컴포넌트를 포함하는 다이어 그램을 그려라.\n\t\t- 클라이언트, API, 웹 서버, 캐시, CDN, 메세지 큐 등이 포함될 수 있다.\n- 최초 설계안이 시스템 규모에 관계된 제약사항들을 만족하는지 개략적으로 계산해보기.\n\t- 계산 과정은 소리내어 설명하기\n\t- 구체적 사용 사례도 몇 가지 살펴보자'\n\n### 3단계 상세 설계 (10분 ~ 25분)\n- 시스템 에서 전반적으로 달성해야 할 목표와 기능 범위 확인\n- 전체 설계의 개략적 청사진 마련\n- 해당 청사진에 대한 면접관의 의견 청취\n- 상세 설계에서 집중해야 할 영역들 확인\n\n### 4단계 마무리 (3분 ~ 5분)\n- 더 개선 가능한 지점을 찾아내라 주문 할 수있다. 개선할 점은 언제나 있기 마련이기에 여러분의 비판적 사고능력을 보이고 좋은 인상을 남길 수 있다.\n- 설계를 다시 한번 요약해주는 것도 도움 될 수있다.\n- 오류가 발생하면 무슨 일이 생기는지 따져보는 것도 좋다.\n- 운영 이슈, 메트릭은 어떻게 수집하고 모니터링은 어떻게 할 것인지? 로그는? 배포 전략등 에대해 논의하면 좋다.\n- 규모 확장에 관하여\n\n\n## 면접 세션에서 해야할 것과 하지 말아야 할 것\n\n### 해야 할 것\n- 질문을 통한 확인, 스스로 내린 가정이 옳다 믿고 진행하지 말자\n- 문제의 요구사항 이해\n- 정답이나, 최선의 답안 같은 것은 없음을 명심\n- 면접관이 나의 사고의 흐름을 이해할 수있도록 소통하기\n- 가능하다면 여러 해법을 제시\n- 개략적 설계에 면접관이 동의하면, 중요한 컴포넌트 부터 세부 사항 설명 진행\n- 면접관의 아이디어 끌어내기\n- 포기하지 말기\n\n### 하지 말아야 할 것\n- 전형적인 면접 문제들에도 대비가 안된 상태로 면접장에 가지마라\n- 요구사항이나 가정들을 분명히 하지 않은 상태에서 설계를 제시 하지 마라\n- 처음 부터 특정 컴포넌트 세부 사항을 깊이 설명하지 마라\n- 진행 중에 막히면, 힌트를 요청하는 걸 주저하지 마라\n- 침묵 속에 설계를 진행 하지 마라\n- 면접관이 끝났다고 하기 전엔 끝난게 아니다. 의견을 자주 구하라\n\n\n\n\n","lastmodified":"2022-12-22T15:29:48.348883125Z","tags":null},"/notes/%EC%83%A4%EB%94%A9Sharding":{"title":"샤딩(Sharding)","content":"\n샤딩은 데이터베이스를 샤드(Shard) 라고 부르는 작은 단위로 분할 하는 기술을 일컫는다.\n\n모든 샤드는 같은 스키마를 쓰지만, 샤드에 보관되는 데이터 사이에는 중복이 없음플\n\n샤딩 전략\n1. 샤딩 키 를 어떻게 정하느냐\n\t1. 파티션 키라고도 부르는데 데이터가 어떻게 분산 될지 정하는 하나이상의 칼럼으로 구성된다.\n\t2. 샤딩 키를 통해 올바른 데이터 베이스로 질의를 보내어 데이터 처리를 하므로 효율을 높일 수있음\n\t3. 샤딩키를 정할때는 데이터를 고르게 분할 할 수있도록 하는게 가장 중요\n\t4. 해결해야할 문제\n\t\t1. 데이터의 재 샤딩 (resharding)\n\t\t\t1. 데이터가 너무 많아져서 하나의 샤드로는 감당하기 어려울 때\n\t\t\t2. 샤드 간 데이터 분포가 균등하지 못해 어떤 샤드에 할당된 공간 소모가 다른 공간에 비해 빨리 진행될 때. 샤드 소진(shard exhaustion) 이 발생하면 샤드 키를 계산하는 함수를 변경하고 데이터를 재 배치 해야한다. 안정해시(consistent hashing) 기법을 활용하면 문제 해결 할 수있다.\n\t\t2. 유명 인사 문제 \n\t\t\t1. 특정 샤드에 질의가 집중되어 서버에 과부화가 걸리는 문제, 유명인사가 같은 샤드에 저장되는 데이터베이스가 있따면 소셜 앱을 구축할 시 과부하가 걸릴 수있음\n\t\t3. 조인과 비정규화\n\t\t\t1. 데이터 베이스를 여러 샤드 서버로 쪼개고 나면, 여러 샤드에 걸친 데이터를 조인하기 힘들어짐. 해결 방버은 데이터베이스를 비정규화 하여 하나의 테이블에서 질의가 수행 될 수 있도록 하는 것.\n\n\n\n[[NoSQL의 다양한 활용 사례]]","lastmodified":"2022-12-22T15:29:48.348883125Z","tags":null},"/notes/%EC%8B%9C%EC%9D%98%EC%84%B1time-sensitive":{"title":"","content":"","lastmodified":"2022-12-22T15:29:48.348883125Z","tags":null}}